name: AudiRED Metadata collection kit
description: Toolkit used for AudiRED metadata collection from oneaudi repositories
inputs:
  github_token:
    description: "token used for accessing dependabot data inside repository"
    required: true
    type: string
  workflow_run_id: 
    description: "id from workflow_run"
    required: true
    type: string
  repository:
    description: "github repository name"
    required: true
    type: string

outputs:
  file_path:
    description: 'Path to the output file'
    type: string

runs:
  using: "composite"
  steps:
    - name: Get all open PRs created by Dependabot
      shell: bash
      run: |
        echo "Beginning dependabot PR collection"
        PRS=$(gh pr list --author dependabot[bot] --state open --json title,url,createdAt --jq '.[] | "\(.title) - \(.url) - Created at: \(.createdAt)"')

        if [ -z "$PRS" ]; then
            echo "No open Dependabot PRs found."
            exit 0
        else
            echo "Open Dependabot PRs:"
            echo "$PRS"

        dependabot_array=()
        while IFS= read -r line; do
            dependabot_array+=("\"$line\"")
            done <<< "$PRS"
            DEPENDABOT_PRS=$(IFS=,; echo "${dependabot_array[*]}")
            echo "DEPENDABOT_PRS=[${DEPENDABOT_PRS}]" >> $GITHUB_ENV
        fi
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Get latest release info and latest version
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "Beginning latest release info and latest version collection"
        LATEST_VERSION=$(gh release view --json tagName -q '.tagName' 2>/dev/null || echo "")
        RELEASE_HISTORY=$(gh api repos/${{ inputs.repository }}/releases --jq '[.[] | {tag: .tag_name, name: .name, date: .published_at, notes: .body}]' 2>/dev/null || echo "")

        if [ -z "$LATEST_VERSION" ]; then
            echo "No releases found."
            LATEST_VERSION="null"
        else
            echo "Latest Version: $LATEST_VERSION"
        fi

        if [ -z "$RELEASE_HISTORY" ]; then
            echo "No releases found."
            RELEASE_HISTORY="[]"
        else
            echo "Latest release notes: $RELEASE_HISTORY"
        fi

        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        echo "RELEASE_HISTORY<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_HISTORY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: NPM Audit Collection
      shell: bash
      run: |
        echo "Beginning npm audit collection"
        npm audit --json > npm-audit.json || true
        npm_audit_output=$(jq -c . npm-audit.json)
        echo "NPM_AUDIT_DATA=$npm_audit_output" >> $GITHUB_ENV

    - name: Extract metadata from package.json of local repository
      shell: bash
      run: |
        echo "Beginning package.json metadata collection"
        repo_name=$(jq -r '.name' package.json)
        repo_version=$(jq -r '.version' package.json)
        dependencies=$(jq '.dependencies' package.json | jq tostring)
        devDependencies=$(jq '.devDependencies' package.json | jq tostring)
        appstoreData=$(jq '.appStore // {}' package.json | jq tostring)
        browserlistData=$(jq '.browserslist // {}' package.json | jq tostring)
        repository=$(jq '.repository' package.json | jq tostring)

        if [ -f "oneaudi-cli.json" ]; then
          awsDomain=$(jq -r '.project.awsDomain // empty' oneaudi-cli.json)
        else
          awsDomain=""
        fi

        echo "repo_name=$repo_name" >> $GITHUB_ENV
        echo "repo_version=$repo_version" >> $GITHUB_ENV
        echo "dependencies=$dependencies" >> $GITHUB_ENV
        echo "devDependencies=$devDependencies" >> $GITHUB_ENV
        echo "appstoreData=$appstoreData" >> $GITHUB_ENV
        echo "browserlistData=$browserlistData" >> $GITHUB_ENV
        echo "repository=$repository" >> $GITHUB_ENV
        echo "awsDomain=$awsDomain" >> $GITHUB_ENV

    - name: Create metadata output json file
      shell: bash
      run: |
        echo "Beginning data combination and creation of output file"
        file_name="metadata-report.json"
        echo "{}" > $file_name
        metadata_json=$(cat $file_name)
        repo_name=$repo_name

        dependabot_prs_json=[]
        if [ -z "$DEPENDABOT_PRS" ]; then
            echo "No dependabot PR data to include"
        else
            dependabot_prs_json="${DEPENDABOT_PRS}"
        fi

        if [ -z "$NPM_AUDIT_DATA" ]; then
            npm_audit_data_parsed="{}"
        else
            npm_audit_data_parsed=$(echo "$NPM_AUDIT_DATA" | jq .)
        fi

        dependencies_parsed=$(echo "$dependencies" | jq fromjson)
        dev_dependencies_parsed=$(echo "$devDependencies" | jq fromjson)
        repository_parsed=$(echo "$repository" | jq fromjson)
        appstore_data_parsed=$(echo "$appstoreData" | jq fromjson)
        browserlist_data_parsed=$(echo "$browserlistData" | jq fromjson)

        updated_metadata_json=$(echo "$metadata_json" | \
          jq --arg repo_name "$repo_name" \
          --arg repo_version "$repo_version" \
          --arg awsDomain "$awsDomain" \
          --arg published_version "$LATEST_VERSION" \
          --argjson release_history "$RELEASE_HISTORY" \
          --argjson dependabot_prs "$dependabot_prs_json" \
          --argjson npm_audit "$npm_audit_data_parsed" \
          --argjson repository "$repository_parsed" \
          --argjson dependencies "$dependencies_parsed" \
          --argjson devDependencies "$dev_dependencies_parsed" \
          --argjson appstoreData "$appstore_data_parsed" \
          --argjson browserlistData "$browserlist_data_parsed" \
          '.[$repo_name] |= . + {repo_version: $repo_version, awsDomain: $awsDomain, published_version: $published_version, release_history: $release_history, dependabot_prs: $dependabot_prs, npm_audit: $npm_audit, dependencies: $dependencies, devDependencies: $devDependencies, appstoreData: $appstoreData, browserlistData: $browserlistData}')
        echo "$updated_metadata_json" > $file_name

        report_artifact_json=$(cat $file_name)
        echo "output data for $file_name: $report_artifact_json"

        echo "file_path=$(pwd)/$file_name" >> $GITHUB_OUTPUT
